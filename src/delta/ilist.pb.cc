// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "delta/ilist.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace delta {

namespace {

const ::google::protobuf::Descriptor* iListEntryProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  iListEntryProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* iListProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  iListProto_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_delta_2filist_2eproto() {
  protobuf_AddDesc_delta_2filist_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "delta/ilist.proto");
  GOOGLE_CHECK(file != NULL);
  iListEntryProto_descriptor_ = file->message_type(0);
  static const int iListEntryProto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(iListEntryProto, iroot_id_),
  };
  iListEntryProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      iListEntryProto_descriptor_,
      iListEntryProto::default_instance_,
      iListEntryProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(iListEntryProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(iListEntryProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(iListEntryProto));
  iListProto_descriptor_ = file->message_type(1);
  static const int iListProto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(iListProto, entry_),
  };
  iListProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      iListProto_descriptor_,
      iListProto::default_instance_,
      iListProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(iListProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(iListProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(iListProto));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_delta_2filist_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    iListEntryProto_descriptor_, &iListEntryProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    iListProto_descriptor_, &iListProto::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_delta_2filist_2eproto() {
  delete iListEntryProto::default_instance_;
  delete iListEntryProto_reflection_;
  delete iListProto::default_instance_;
  delete iListProto_reflection_;
}

void protobuf_AddDesc_delta_2filist_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021delta/ilist.proto\022\005delta\"#\n\017iListEntry"
    "Proto\022\020\n\010iroot_id\030\001 \002(\r\"3\n\niListProto\022%\n"
    "\005entry\030\001 \003(\0132\026.delta.iListEntryProto", 116);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "delta/ilist.proto", &protobuf_RegisterTypes);
  iListEntryProto::default_instance_ = new iListEntryProto();
  iListProto::default_instance_ = new iListProto();
  iListEntryProto::default_instance_->InitAsDefaultInstance();
  iListProto::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_delta_2filist_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_delta_2filist_2eproto {
  StaticDescriptorInitializer_delta_2filist_2eproto() {
    protobuf_AddDesc_delta_2filist_2eproto();
  }
} static_descriptor_initializer_delta_2filist_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int iListEntryProto::kIrootIdFieldNumber;
#endif  // !_MSC_VER

iListEntryProto::iListEntryProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void iListEntryProto::InitAsDefaultInstance() {
}

iListEntryProto::iListEntryProto(const iListEntryProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void iListEntryProto::SharedCtor() {
  _cached_size_ = 0;
  iroot_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

iListEntryProto::~iListEntryProto() {
  SharedDtor();
}

void iListEntryProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void iListEntryProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* iListEntryProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return iListEntryProto_descriptor_;
}

const iListEntryProto& iListEntryProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_delta_2filist_2eproto();  return *default_instance_;
}

iListEntryProto* iListEntryProto::default_instance_ = NULL;

iListEntryProto* iListEntryProto::New() const {
  return new iListEntryProto;
}

void iListEntryProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    iroot_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool iListEntryProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 iroot_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &iroot_id_)));
          set_has_iroot_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void iListEntryProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 iroot_id = 1;
  if (has_iroot_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->iroot_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* iListEntryProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 iroot_id = 1;
  if (has_iroot_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->iroot_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int iListEntryProto::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 iroot_id = 1;
    if (has_iroot_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->iroot_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void iListEntryProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const iListEntryProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const iListEntryProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void iListEntryProto::MergeFrom(const iListEntryProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iroot_id()) {
      set_iroot_id(from.iroot_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void iListEntryProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void iListEntryProto::CopyFrom(const iListEntryProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool iListEntryProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void iListEntryProto::Swap(iListEntryProto* other) {
  if (other != this) {
    std::swap(iroot_id_, other->iroot_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata iListEntryProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = iListEntryProto_descriptor_;
  metadata.reflection = iListEntryProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int iListProto::kEntryFieldNumber;
#endif  // !_MSC_VER

iListProto::iListProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void iListProto::InitAsDefaultInstance() {
}

iListProto::iListProto(const iListProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void iListProto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

iListProto::~iListProto() {
  SharedDtor();
}

void iListProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void iListProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* iListProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return iListProto_descriptor_;
}

const iListProto& iListProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_delta_2filist_2eproto();  return *default_instance_;
}

iListProto* iListProto::default_instance_ = NULL;

iListProto* iListProto::New() const {
  return new iListProto;
}

void iListProto::Clear() {
  entry_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool iListProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .delta.iListEntryProto entry = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_entry:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_entry()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_entry;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void iListProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .delta.iListEntryProto entry = 1;
  for (int i = 0; i < this->entry_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->entry(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* iListProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .delta.iListEntryProto entry = 1;
  for (int i = 0; i < this->entry_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->entry(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int iListProto::ByteSize() const {
  int total_size = 0;
  
  // repeated .delta.iListEntryProto entry = 1;
  total_size += 1 * this->entry_size();
  for (int i = 0; i < this->entry_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->entry(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void iListProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const iListProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const iListProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void iListProto::MergeFrom(const iListProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  entry_.MergeFrom(from.entry_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void iListProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void iListProto::CopyFrom(const iListProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool iListProto::IsInitialized() const {
  
  for (int i = 0; i < entry_size(); i++) {
    if (!this->entry(i).IsInitialized()) return false;
  }
  return true;
}

void iListProto::Swap(iListProto* other) {
  if (other != this) {
    entry_.Swap(&other->entry_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata iListProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = iListProto_descriptor_;
  metadata.reflection = iListProto_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace delta

// @@protoc_insertion_point(global_scope)
