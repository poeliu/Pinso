// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "delta/slist.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace delta {

namespace {

const ::google::protobuf::Descriptor* sListEntryProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  sListEntryProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* sListProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  sListProto_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_delta_2fslist_2eproto() {
  protobuf_AddDesc_delta_2fslist_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "delta/slist.proto");
  GOOGLE_CHECK(file != NULL);
  sListEntryProto_descriptor_ = file->message_type(0);
  static const int sListEntryProto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sListEntryProto, iroot_id_),
  };
  sListEntryProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      sListEntryProto_descriptor_,
      sListEntryProto::default_instance_,
      sListEntryProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sListEntryProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sListEntryProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(sListEntryProto));
  sListProto_descriptor_ = file->message_type(1);
  static const int sListProto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sListProto, entry_),
  };
  sListProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      sListProto_descriptor_,
      sListProto::default_instance_,
      sListProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sListProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sListProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(sListProto));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_delta_2fslist_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    sListEntryProto_descriptor_, &sListEntryProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    sListProto_descriptor_, &sListProto::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_delta_2fslist_2eproto() {
  delete sListEntryProto::default_instance_;
  delete sListEntryProto_reflection_;
  delete sListProto::default_instance_;
  delete sListProto_reflection_;
}

void protobuf_AddDesc_delta_2fslist_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021delta/slist.proto\022\005delta\"#\n\017sListEntry"
    "Proto\022\020\n\010iroot_id\030\001 \002(\r\"3\n\nsListProto\022%\n"
    "\005entry\030\001 \003(\0132\026.delta.sListEntryProto", 116);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "delta/slist.proto", &protobuf_RegisterTypes);
  sListEntryProto::default_instance_ = new sListEntryProto();
  sListProto::default_instance_ = new sListProto();
  sListEntryProto::default_instance_->InitAsDefaultInstance();
  sListProto::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_delta_2fslist_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_delta_2fslist_2eproto {
  StaticDescriptorInitializer_delta_2fslist_2eproto() {
    protobuf_AddDesc_delta_2fslist_2eproto();
  }
} static_descriptor_initializer_delta_2fslist_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int sListEntryProto::kIrootIdFieldNumber;
#endif  // !_MSC_VER

sListEntryProto::sListEntryProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void sListEntryProto::InitAsDefaultInstance() {
}

sListEntryProto::sListEntryProto(const sListEntryProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void sListEntryProto::SharedCtor() {
  _cached_size_ = 0;
  iroot_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sListEntryProto::~sListEntryProto() {
  SharedDtor();
}

void sListEntryProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void sListEntryProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sListEntryProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sListEntryProto_descriptor_;
}

const sListEntryProto& sListEntryProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_delta_2fslist_2eproto();  return *default_instance_;
}

sListEntryProto* sListEntryProto::default_instance_ = NULL;

sListEntryProto* sListEntryProto::New() const {
  return new sListEntryProto;
}

void sListEntryProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    iroot_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool sListEntryProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 iroot_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &iroot_id_)));
          set_has_iroot_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sListEntryProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 iroot_id = 1;
  if (has_iroot_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->iroot_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* sListEntryProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 iroot_id = 1;
  if (has_iroot_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->iroot_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int sListEntryProto::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 iroot_id = 1;
    if (has_iroot_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->iroot_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sListEntryProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const sListEntryProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const sListEntryProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void sListEntryProto::MergeFrom(const sListEntryProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iroot_id()) {
      set_iroot_id(from.iroot_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void sListEntryProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sListEntryProto::CopyFrom(const sListEntryProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sListEntryProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void sListEntryProto::Swap(sListEntryProto* other) {
  if (other != this) {
    std::swap(iroot_id_, other->iroot_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata sListEntryProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = sListEntryProto_descriptor_;
  metadata.reflection = sListEntryProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int sListProto::kEntryFieldNumber;
#endif  // !_MSC_VER

sListProto::sListProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void sListProto::InitAsDefaultInstance() {
}

sListProto::sListProto(const sListProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void sListProto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sListProto::~sListProto() {
  SharedDtor();
}

void sListProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void sListProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sListProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sListProto_descriptor_;
}

const sListProto& sListProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_delta_2fslist_2eproto();  return *default_instance_;
}

sListProto* sListProto::default_instance_ = NULL;

sListProto* sListProto::New() const {
  return new sListProto;
}

void sListProto::Clear() {
  entry_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool sListProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .delta.sListEntryProto entry = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_entry:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_entry()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_entry;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sListProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .delta.sListEntryProto entry = 1;
  for (int i = 0; i < this->entry_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->entry(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* sListProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .delta.sListEntryProto entry = 1;
  for (int i = 0; i < this->entry_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->entry(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int sListProto::ByteSize() const {
  int total_size = 0;
  
  // repeated .delta.sListEntryProto entry = 1;
  total_size += 1 * this->entry_size();
  for (int i = 0; i < this->entry_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->entry(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sListProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const sListProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const sListProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void sListProto::MergeFrom(const sListProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  entry_.MergeFrom(from.entry_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void sListProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sListProto::CopyFrom(const sListProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sListProto::IsInitialized() const {
  
  for (int i = 0; i < entry_size(); i++) {
    if (!this->entry(i).IsInitialized()) return false;
  }
  return true;
}

void sListProto::Swap(sListProto* other) {
  if (other != this) {
    entry_.Swap(&other->entry_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata sListProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = sListProto_descriptor_;
  metadata.reflection = sListProto_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace delta

// @@protoc_insertion_point(global_scope)
